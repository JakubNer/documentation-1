{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Liquality documentation. Here you will find information on how to setup, configure, run or develop multichain applications. Reference Blog posts \u00b6 Atomic Swaps as an alternative to instant exchanges \u00b6 Your Trustless, Cross-Chain Bridge Is Already Here \u00b6 Start trading today \u00b6 Why Decentralized Exchanges (DEXs) Are Insecure \u00b6 Atomic Swap between Bitcoin, Dai, and Ether: Liquality is Live on Mainnet \u00b6 Hash Time Locked Contracts (HTLCs) Explained \u00b6 Atomic Swaps Explained: What They Are, How They Work, and Why They Are Important \u00b6 Decentralization \u2260 Disintermediation \u00b6","title":"Welcome"},{"location":"#blog-posts","text":"","title":"Blog posts"},{"location":"#atomic-swaps-as-an-alternative-to-instant-exchanges","text":"","title":"Atomic Swaps as an alternative to instant exchanges"},{"location":"#your-trustless-cross-chain-bridge-is-already-here","text":"","title":"Your Trustless, Cross-Chain Bridge Is Already Here"},{"location":"#start-trading-today","text":"","title":"Start trading today"},{"location":"#why-decentralized-exchanges-dexs-are-insecure","text":"","title":"Why Decentralized Exchanges (DEXs) Are Insecure"},{"location":"#atomic-swap-between-bitcoin-dai-and-ether-liquality-is-live-on-mainnet","text":"","title":"Atomic Swap between Bitcoin, Dai, and Ether: Liquality is Live on Mainnet"},{"location":"#hash-time-locked-contracts-htlcs-explained","text":"","title":"Hash Time Locked Contracts (HTLCs) Explained"},{"location":"#atomic-swaps-explained-what-they-are-how-they-work-and-why-they-are-important","text":"","title":"Atomic Swaps Explained: What They Are, How They Work, and Why They Are Important"},{"location":"#decentralization-disintermediation","text":"","title":"Decentralization \u2260 Disintermediation"},{"location":"getting_started/","text":"Value Management System \u00b6 Web Extension \u00b6 Develop \u00b6","title":"Tutorials"},{"location":"getting_started/#value-management-system","text":"","title":"Value Management System"},{"location":"getting_started/#web-extension","text":"","title":"Web Extension"},{"location":"getting_started/#develop","text":"","title":"Develop"},{"location":"sdk/","text":"Chain Abstraction Layer \u00b6 :warning: This project is under heavy development. Expect bugs & breaking changes. :pencil: Introductory Blog Post: The Missing Tool to Cross-Chain Development \u00b6 Query different blockchains with account management using a single and simple interface. Packages \u00b6 Package Version @liquality/bitcoin-bitcoinjs-lib-swap-provider @liquality/bitcoin-ledger-provider @liquality/bitcoin-networks @liquality/bitcoin-rpc-provider @liquality/bitcoin-wallet-node-provider @liquality/bitcoin-swap-provider @liquality/bitcoin-esplora-api-provider @liquality/bitcoin-esplora-swap-find-provider @liquality/bitcoin-utils @liquality/bundle @liquality/client @liquality/crypto @liquality/debug @liquality/errors @liquality/ethereum-erc20-provider @liquality/ethereum-erc20-swap-provider @liquality/ethereum-ledger-provider @liquality/ethereum-metamask-provider @liquality/ethereum-networks @liquality/ethereum-rpc-provider @liquality/ethereum-swap-provider @liquality/ethereum-blockscout-swap-find-provider @liquality/ethereum-scraper-swap-find-provider @liquality/ethereum-utils @liquality/jsonrpc-provider @liquality/ledger-provider @liquality/metamask-provider @liquality/provider @liquality/schema @liquality/utils @liquality/wallet-provider Usage \u00b6 import Client from '@liquality/client' import BitcoinRpcProvider from '@liquality/bitcoin-rpc-provider' import EthereumRpcProvider from '@liquality/ethereum-rpc-provider' import BitcoinLedgerProvider from '@liquality/bitcoin-ledger-provider' import EthereumLedgerProvider from '@liquality/ethereum-ledger-provider' import BitcoinNetworks from '@liquality/bitcoin-networks' import EthereumNetworks from '@liquality/ethereum-networks' const bitcoin = new Client () const ethereum = new Client () bitcoin . addProvider ( new BitcoinRpcProvider ( 'https://liquality.io/bitcointestnetrpc/' , 'bitcoin' , 'local321' )) ethereum . addProvider ( new EthereumRpcProvider ( 'https://rinkeby.infura.io/v3/xxx' )) bitcoin . addProvider ( new BitcoinLedgerProvider ( { network : BitcoinNetworks . bitcoin_testnet } )) ethereum . addProvider ( new EthereumLedgerProvider ( { network : EthereumNetworks . rinkeby } )) // Fetch addresses from Ledger wallet using a single-unified API const [ bitcoinAddress ] = await bitcoin . wallet . getAddresses ( 0 , 1 ) const [ ethereumAddress ] = await ethereum . wallet . getAddresses ( 0 , 1 ) // Sign a message const signedMessageBitcoin = await bitcoin . wallet . signMessage ( 'The Times 3 January 2009 Chancellor on brink of second bailout for banks' , bitcoinAddress ) const signedMessageEthereum = await ethereum . wallet . signMessage ( 'The Times 3 January 2009 Chancellor on brink of second bailout for banks' , ethereumAddress ) // Send a transaction await bitcoin . chain . sendTransaction ( < to > , 1000 ) await ethereum . chain . sendTransaction ( < to > , 1000 ) Development \u00b6 npm install npm run bootstrap npm run watch Production \u00b6 npm run build Publish \u00b6 npm run new:version # prepare npm run publish:all # publish License \u00b6 MIT","title":"Index"},{"location":"sdk/#chain-abstraction-layer","text":":warning: This project is under heavy development. Expect bugs & breaking changes.","title":"Chain Abstraction Layer "},{"location":"sdk/#pencil-introductory-blog-post-the-missing-tool-to-cross-chain-development","text":"Query different blockchains with account management using a single and simple interface.","title":":pencil: Introductory Blog Post: The Missing Tool to Cross-Chain Development"},{"location":"sdk/#packages","text":"Package Version @liquality/bitcoin-bitcoinjs-lib-swap-provider @liquality/bitcoin-ledger-provider @liquality/bitcoin-networks @liquality/bitcoin-rpc-provider @liquality/bitcoin-wallet-node-provider @liquality/bitcoin-swap-provider @liquality/bitcoin-esplora-api-provider @liquality/bitcoin-esplora-swap-find-provider @liquality/bitcoin-utils @liquality/bundle @liquality/client @liquality/crypto @liquality/debug @liquality/errors @liquality/ethereum-erc20-provider @liquality/ethereum-erc20-swap-provider @liquality/ethereum-ledger-provider @liquality/ethereum-metamask-provider @liquality/ethereum-networks @liquality/ethereum-rpc-provider @liquality/ethereum-swap-provider @liquality/ethereum-blockscout-swap-find-provider @liquality/ethereum-scraper-swap-find-provider @liquality/ethereum-utils @liquality/jsonrpc-provider @liquality/ledger-provider @liquality/metamask-provider @liquality/provider @liquality/schema @liquality/utils @liquality/wallet-provider","title":"Packages"},{"location":"sdk/#usage","text":"import Client from '@liquality/client' import BitcoinRpcProvider from '@liquality/bitcoin-rpc-provider' import EthereumRpcProvider from '@liquality/ethereum-rpc-provider' import BitcoinLedgerProvider from '@liquality/bitcoin-ledger-provider' import EthereumLedgerProvider from '@liquality/ethereum-ledger-provider' import BitcoinNetworks from '@liquality/bitcoin-networks' import EthereumNetworks from '@liquality/ethereum-networks' const bitcoin = new Client () const ethereum = new Client () bitcoin . addProvider ( new BitcoinRpcProvider ( 'https://liquality.io/bitcointestnetrpc/' , 'bitcoin' , 'local321' )) ethereum . addProvider ( new EthereumRpcProvider ( 'https://rinkeby.infura.io/v3/xxx' )) bitcoin . addProvider ( new BitcoinLedgerProvider ( { network : BitcoinNetworks . bitcoin_testnet } )) ethereum . addProvider ( new EthereumLedgerProvider ( { network : EthereumNetworks . rinkeby } )) // Fetch addresses from Ledger wallet using a single-unified API const [ bitcoinAddress ] = await bitcoin . wallet . getAddresses ( 0 , 1 ) const [ ethereumAddress ] = await ethereum . wallet . getAddresses ( 0 , 1 ) // Sign a message const signedMessageBitcoin = await bitcoin . wallet . signMessage ( 'The Times 3 January 2009 Chancellor on brink of second bailout for banks' , bitcoinAddress ) const signedMessageEthereum = await ethereum . wallet . signMessage ( 'The Times 3 January 2009 Chancellor on brink of second bailout for banks' , ethereumAddress ) // Send a transaction await bitcoin . chain . sendTransaction ( < to > , 1000 ) await ethereum . chain . sendTransaction ( < to > , 1000 )","title":"Usage"},{"location":"sdk/#development","text":"npm install npm run bootstrap npm run watch","title":"Development"},{"location":"sdk/#production","text":"npm run build","title":"Production"},{"location":"sdk/#publish","text":"npm run new:version # prepare npm run publish:all # publish","title":"Publish"},{"location":"sdk/#license","text":"MIT","title":"License"},{"location":"sdk/LICENSE/","text":"MIT License Copyright (c) 2018 Liquality Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"server/administration/architecture/","text":"Architecture \u00b6 The approach taken by liquality is focussed on developing interoperability as a common language which favours standards over further intermediation through additional components and/or third-party blockchain middleware. Standards currently developed for interoperability include a slightly revised version of Bitcoin Improvement Proposal 199 and a compatibility standards for Etheream called the Ethereum Improvement Proposal 1630 . These standards implement a common language for executing cross-chain atomic swaps between bitcoin, ether, and ERC20 tokens, and extending support for additional digital assets which support sha256 hashlocks and timelocks . The below figure shows a high-level overview of the liquality stack architecture. The liquality stack is licensed under the MIT License , and is a completely free and open source community project. Each component developed or considered in the stack aims to ensure that you can run and customize your own instance without any dependency on a third-party.","title":"Architecture"},{"location":"server/administration/architecture/#architecture","text":"The approach taken by liquality is focussed on developing interoperability as a common language which favours standards over further intermediation through additional components and/or third-party blockchain middleware. Standards currently developed for interoperability include a slightly revised version of Bitcoin Improvement Proposal 199 and a compatibility standards for Etheream called the Ethereum Improvement Proposal 1630 . These standards implement a common language for executing cross-chain atomic swaps between bitcoin, ether, and ERC20 tokens, and extending support for additional digital assets which support sha256 hashlocks and timelocks . The below figure shows a high-level overview of the liquality stack architecture. The liquality stack is licensed under the MIT License , and is a completely free and open source community project. Each component developed or considered in the stack aims to ensure that you can run and customize your own instance without any dependency on a third-party.","title":"Architecture"},{"location":"server/administration/installing_agent/","text":"Installing the liquality automated agent \u00b6 In this section we will guide you through the steps to install and run a liquality automated agent. The agent allows for market making, generation and management of orders, and processes swap requests without the need for manual processing. Pre-requisite \u00b6 Before we can run an agent, you will need to confirm that you have a version of mongo db running. $ mongo MongoDB shell version v4.2.1 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"7f50e6fc-8129-43e3-83b0-1e3a29fb4638\") } MongoDB server version: 4.2.1 Clone a copy of the liquality agent. $ git clone --branch master https://github.com/liquality/agent Confirm that you are using the master branch. $ cd ./agent/ && git branch Install the required node package manager dependencies. $ npm install Make a copy of the example environment configuration files. $ cp ./.env.example ./.env $ cp ./sample-config.toml ./config.toml Update the .env file to reference the config.toml file. CONFIG_PATH=./config.toml Update the config.toml file to reflect your local environment. The most important parameters to update include your mongo db, as well as the bitcoin and ethereum node url's, credentials together with contract addresses for supported assets you wish to host. Initiate our market data. $ npm run migrate This will create a database in mongo db which includes the necessary list of supported assets, rates and other meta data which is configurable by the agent operator. You can confirm that the market data has been created using the mongo cli. shell $ mongo mongodb://127.0.0.1/liquality MongoDB shell version v4.2.1 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"8eae6b2e-9be7-4bcc-ab17-5cd198a68063\") } MongoDB server version: 4.2.1 db.markets.find({}).pretty() { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b0818e\"), \"from\" : \"BTC\", \"to\" : \"ETH\", \"min\" : 100000, \"max\" : 5000000, \"minConf\" : 1, \"rate\" : 48.26, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b0818f\"), \"from\" : \"ETH\", \"to\" : \"BTC\", \"min\" : 250000000000000000, \"max\" : 2500000000000000000, \"minConf\" : 1, \"rate\" : 0.028, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b08190\"), \"from\" : \"DAI\", \"to\" : \"BTC\", \"min\" : 1000000000000000000, \"max\" : 100000000000000000000, \"minConf\" : 1, \"rate\" : 0.000135, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } Start the agent API service. The API service provides an http interface for create quotes and managing order information in mongo. Support for this API has been integrated into the UI, but can be used for integration by any other application. $ npm run api We can confirm that the api is up and running by issuing a GET query against the marketinfo endpoint. $ curl -s http://localhost:3030/api/swap/marketinfo | jq . [ { \"from\": \"BTC\", \"to\": \"ETH\", \"min\": 100000, \"max\": 5000000, \"minConf\": 1, \"rate\": 48.26, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" }, { \"from\": \"ETH\", \"to\": \"BTC\", \"min\": 2.5e+17, \"max\": 2.5e+18, \"minConf\": 1, \"rate\": 0.028, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" }, { \"from\": \"DAI\", \"to\": \"BTC\", \"min\": 1e+18, \"max\": 1e+20, \"minConf\": 1, \"rate\": 0.000135, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" } ] Start the worker processes. To avoid adding overhead to the APIs, we have isolated all the administrative overhead and back-office processing into a service worker architecture. This provides a separation of concerns which allows for more streamlined operation as well as debugging and future scaling. $ npm run worker You should now have a operation version of the agent running on your local system. You can now enable integration between the user interface and agent by uncommenting the hostAgent configuration parameter we had added during the previous steps. $ vi ./src/config/config.js ... hostAgent: 'http://localhost:3030' , ... Once enabled, your local user interface should present you with a list of available assets for swapping. Conclusion \u00b6 In this tutorial we guided you through setting up a local instance of the liquality swap user interface and complimentary automated agent. We encourage developers wishing to develop applications using the liquality libraries or to extend the functionality to submit Pull Requests get in touch via any of your support channels. Developers wishing to learn more about the standards and libraries are encouraged to checkout our Chain Abstraction Layer .","title":"Server"},{"location":"server/administration/installing_agent/#installing-the-liquality-automated-agent","text":"In this section we will guide you through the steps to install and run a liquality automated agent. The agent allows for market making, generation and management of orders, and processes swap requests without the need for manual processing.","title":"Installing the liquality automated agent"},{"location":"server/administration/installing_agent/#pre-requisite","text":"Before we can run an agent, you will need to confirm that you have a version of mongo db running. $ mongo MongoDB shell version v4.2.1 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"7f50e6fc-8129-43e3-83b0-1e3a29fb4638\") } MongoDB server version: 4.2.1 Clone a copy of the liquality agent. $ git clone --branch master https://github.com/liquality/agent Confirm that you are using the master branch. $ cd ./agent/ && git branch Install the required node package manager dependencies. $ npm install Make a copy of the example environment configuration files. $ cp ./.env.example ./.env $ cp ./sample-config.toml ./config.toml Update the .env file to reference the config.toml file. CONFIG_PATH=./config.toml Update the config.toml file to reflect your local environment. The most important parameters to update include your mongo db, as well as the bitcoin and ethereum node url's, credentials together with contract addresses for supported assets you wish to host. Initiate our market data. $ npm run migrate This will create a database in mongo db which includes the necessary list of supported assets, rates and other meta data which is configurable by the agent operator. You can confirm that the market data has been created using the mongo cli. shell $ mongo mongodb://127.0.0.1/liquality MongoDB shell version v4.2.1 connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb Implicit session: session { \"id\" : UUID(\"8eae6b2e-9be7-4bcc-ab17-5cd198a68063\") } MongoDB server version: 4.2.1 db.markets.find({}).pretty() { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b0818e\"), \"from\" : \"BTC\", \"to\" : \"ETH\", \"min\" : 100000, \"max\" : 5000000, \"minConf\" : 1, \"rate\" : 48.26, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b0818f\"), \"from\" : \"ETH\", \"to\" : \"BTC\", \"min\" : 250000000000000000, \"max\" : 2500000000000000000, \"minConf\" : 1, \"rate\" : 0.028, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } { \"_id\" : ObjectId(\"5dcbec1e21f1c02f07b08190\"), \"from\" : \"DAI\", \"to\" : \"BTC\", \"min\" : 1000000000000000000, \"max\" : 100000000000000000000, \"minConf\" : 1, \"rate\" : 0.000135, \"spread\" : 0.05, \"orderExpiresIn\" : 3600000, \"status\" : \"ACTIVE\", \"__v\" : 0 } Start the agent API service. The API service provides an http interface for create quotes and managing order information in mongo. Support for this API has been integrated into the UI, but can be used for integration by any other application. $ npm run api We can confirm that the api is up and running by issuing a GET query against the marketinfo endpoint. $ curl -s http://localhost:3030/api/swap/marketinfo | jq . [ { \"from\": \"BTC\", \"to\": \"ETH\", \"min\": 100000, \"max\": 5000000, \"minConf\": 1, \"rate\": 48.26, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" }, { \"from\": \"ETH\", \"to\": \"BTC\", \"min\": 2.5e+17, \"max\": 2.5e+18, \"minConf\": 1, \"rate\": 0.028, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" }, { \"from\": \"DAI\", \"to\": \"BTC\", \"min\": 1e+18, \"max\": 1e+20, \"minConf\": 1, \"rate\": 0.000135, \"spread\": 0.05, \"orderExpiresIn\": 3600000, \"status\": \"ACTIVE\" } ] Start the worker processes. To avoid adding overhead to the APIs, we have isolated all the administrative overhead and back-office processing into a service worker architecture. This provides a separation of concerns which allows for more streamlined operation as well as debugging and future scaling. $ npm run worker You should now have a operation version of the agent running on your local system. You can now enable integration between the user interface and agent by uncommenting the hostAgent configuration parameter we had added during the previous steps. $ vi ./src/config/config.js ... hostAgent: 'http://localhost:3030' , ... Once enabled, your local user interface should present you with a list of available assets for swapping.","title":"Pre-requisite"},{"location":"server/administration/installing_agent/#conclusion","text":"In this tutorial we guided you through setting up a local instance of the liquality swap user interface and complimentary automated agent. We encourage developers wishing to develop applications using the liquality libraries or to extend the functionality to submit Pull Requests get in touch via any of your support channels. Developers wishing to learn more about the standards and libraries are encouraged to checkout our Chain Abstraction Layer .","title":"Conclusion"},{"location":"server/administration/installing_interface/","text":"Installing the liquality swap interface \u00b6 In this section we will be going through the steps required to installing and running a local liquality swap interface from your local system. Clone the liquality swap interface. $ git clone --branch master https://github.com/liquality/liquality-swap NOTE: We attempt to maintain all work in progress on the dev branch, with stable changes being merged to the master branch. For the purpose of this tutorial, we will suggest using the development branch as it contains the latest changes required. Confirm that you are using the master branch $ cd liquality-swap && git branch Install the required node package manager dependencies. $ npm install Update the configuration to match your environment. $ vi ./src/config/config.js The configuration script allows you to set your own list of supported assets, together with a list of your preferred trusted nodes. For now, we will comment out the configuration for the hostAgent . This allows for integration with the liquality agent that is optional for market making, and which we will cover in the next section. // hostAgent: 'http://localhost:3030', Important options to update here include the urls to your nodes, as well as any contract addresses. Considering that the front-end application requires access to the RPC end-points for your nodes, we will need to also startup a cors proxy for bitcoin as it does not support cors out of the box. To do so you can run ``` lcp --proxyUrl http://127.0.0.1:18443 Proxy Active Proxy Url: http://127.0.0.1:18443 Proxy Partial: proxy PORT: 8010 To start using the proxy simply replace the proxied part of your url with: http://localhost:8010/proxy ``` Starting the liquality swap interface. $ npm start This should invoke an https server on port 3000 and automatically attempt to open it with your default browser . For the purposes of this tutorial, we will be using chrome as most of the tests have been done using chrome, but should also work in firefox and edge. NOTE: As this process provides a convenient way for bootstrapping the server, it uses a self signed certificate which might be prompted by the browser. To overcome this, you will might need to enable allowing insecure certificates for localhost by visiting the following url in chrome. chrome://flags/#allow-insecure-localhost Following the above, you should now have your very own instance of the liquality swap interface up and running on your system. We have also provided a packaged solution which can be downloaded from the liquality launcher repository .","title":"Client"},{"location":"server/administration/installing_interface/#installing-the-liquality-swap-interface","text":"In this section we will be going through the steps required to installing and running a local liquality swap interface from your local system. Clone the liquality swap interface. $ git clone --branch master https://github.com/liquality/liquality-swap NOTE: We attempt to maintain all work in progress on the dev branch, with stable changes being merged to the master branch. For the purpose of this tutorial, we will suggest using the development branch as it contains the latest changes required. Confirm that you are using the master branch $ cd liquality-swap && git branch Install the required node package manager dependencies. $ npm install Update the configuration to match your environment. $ vi ./src/config/config.js The configuration script allows you to set your own list of supported assets, together with a list of your preferred trusted nodes. For now, we will comment out the configuration for the hostAgent . This allows for integration with the liquality agent that is optional for market making, and which we will cover in the next section. // hostAgent: 'http://localhost:3030', Important options to update here include the urls to your nodes, as well as any contract addresses. Considering that the front-end application requires access to the RPC end-points for your nodes, we will need to also startup a cors proxy for bitcoin as it does not support cors out of the box. To do so you can run ``` lcp --proxyUrl http://127.0.0.1:18443 Proxy Active Proxy Url: http://127.0.0.1:18443 Proxy Partial: proxy PORT: 8010 To start using the proxy simply replace the proxied part of your url with: http://localhost:8010/proxy ``` Starting the liquality swap interface. $ npm start This should invoke an https server on port 3000 and automatically attempt to open it with your default browser . For the purposes of this tutorial, we will be using chrome as most of the tests have been done using chrome, but should also work in firefox and edge. NOTE: As this process provides a convenient way for bootstrapping the server, it uses a self signed certificate which might be prompted by the browser. To overcome this, you will might need to enable allowing insecure certificates for localhost by visiting the following url in chrome. chrome://flags/#allow-insecure-localhost Following the above, you should now have your very own instance of the liquality swap interface up and running on your system. We have also provided a packaged solution which can be downloaded from the liquality launcher repository .","title":"Installing the liquality swap interface"},{"location":"server/administration/introduction/","text":"This tutorial will guide you through the necessary steps required to run the operational components for executing atomic swaps on your local environment. An instance of the UI and agent configured for the bitcoin and ethereum testnets has been setup here for convenience. The components covered will include the liquality swap user interface , and an optional automated agent . The swap interface is a functional reference implementation that facilitates the workflow between two anonymous parties wishing to swap digital assets with minimized counter party risk. The automated agent can be thought of a as a back-office system for those wishing to enable an automated market making system which is complimentary, but independent from the user interface.","title":"Introduction"},{"location":"server/administration/prerequisites/","text":"Prerequisites \u00b6 Before we can invoke an operational instance of the agent and user interface, it is recommended that you install the following prerequisites. This is not a requirement, but suggested to avoid having to delegate trust to any third party. In this tutorial we will guide you through setting up a working stance of the liquality user interface and agent against a local testing configuration . You can however also follow these same steps against testnet or mainnet nodes depending on your requirement and once you feel more comfortable with the setup. Components which fall out of the scope for the liquality stack and which are required include: Required for the User Interface and Agent \u00b6 Bitcoin Node Ethereum Node - We will be using ganache considering this is for testing purposes. NodeJS Required for the Agent \u00b6 MongoDB >= 4.x - Required for the agent Optional depending on your preferences \u00b6 Esplora Block Explorer APIs - optional if you do not wish to use the blockstream hosted instance. CORS Proxy - Required to enable CORS for your bitcoin node. You can also use nginx or any other reverse proxy which enables CORS separately. JQ - Optional json command line parser, only used for legibility. For convenience, we've also added a docker-compose script which will setup a local bitcoin and ethereum environment which you can use for testing. $ git clone --branch master https://github.com/liquality/liquality-swap/ $ cd ./liquality-swap/src/test/integration/environment/ $ docker-compose up The above will start a bitcoin node in regtest mode with a cors proxy exposed over port 18443, as well as a ethereum ganache instance over port 8545. You will have to install mongo separately. You can test this as follows. For Bitcoin $ curl -s --user bitcoin:local321 --data-binary '{\"jsonrpc\":\"1.0\",\"id\":\"curltext\",\"method\":\"getblockchaininfo\",\"params\":[]}' -H 'content-type:text/plain;' http://127.0.0.1:18443 | jq . { \"result\" : { \"chain\" : \"regtest\" , \"blocks\" : 2405 , \"headers\" : 2405 , \"bestblockhash\" : \"3f468ba75ec193e2f61ada2d05316f2d64b4ada559ace068912168d23ba07090\" , \"difficulty\" : 4 .656542373906925e-10, \"mediantime\" : 1573650754 , \"verificationprogress\" : 1 , \"initialblockdownload\" : false, \"chainwork\" : \"00000000000000000000000000000000000000000000000000000000000012cc\" , \"size_on_disk\" : 753976 , \"pruned\" : false, \"softforks\" : [ { \"id\" : \"bip34\" , \"version\" : 2 , \"reject\" : { \"status\" : true } } , { \"id\" : \"bip66\" , \"version\" : 3 , \"reject\" : { \"status\" : true } } , { \"id\" : \"bip65\" , \"version\" : 4 , \"reject\" : { \"status\" : true } } ] , \"bip9_softforks\" : { \"csv\" : { \"status\" : \"active\" , \"startTime\" : 0 , \"timeout\" : 9223372036854776000 , \"since\" : 432 } , \"segwit\" : { \"status\" : \"active\" , \"startTime\" : -1, \"timeout\" : 9223372036854776000 , \"since\" : 0 } } , \"warnings\" : \"\" } , \"error\" : null, \"id\" : \"curltext\" } For Ethereum $ curl -s --data-binary '{\"jsonrpc\":\"1.0\",\"id\":\"curltext\",\"method\":\"net_version\",\"params\":[]}' -H 'content-type:text/plain;' http://127.0.0.1:8545 | jq . { \"id\" : \"curltext\" , \"jsonrpc\" : \"1.0\" , \"result\" : \"1573649903688\" } For Mongo, we can use docker $ docker run -p27017:27017 -d mongo","title":"Prerequisites"},{"location":"server/administration/prerequisites/#prerequisites","text":"Before we can invoke an operational instance of the agent and user interface, it is recommended that you install the following prerequisites. This is not a requirement, but suggested to avoid having to delegate trust to any third party. In this tutorial we will guide you through setting up a working stance of the liquality user interface and agent against a local testing configuration . You can however also follow these same steps against testnet or mainnet nodes depending on your requirement and once you feel more comfortable with the setup. Components which fall out of the scope for the liquality stack and which are required include:","title":"Prerequisites"},{"location":"server/administration/prerequisites/#required-for-the-user-interface-and-agent","text":"Bitcoin Node Ethereum Node - We will be using ganache considering this is for testing purposes. NodeJS","title":"Required for the User Interface and Agent"},{"location":"server/administration/prerequisites/#required-for-the-agent","text":"MongoDB >= 4.x - Required for the agent","title":"Required for the Agent"},{"location":"server/administration/prerequisites/#optional-depending-on-your-preferences","text":"Esplora Block Explorer APIs - optional if you do not wish to use the blockstream hosted instance. CORS Proxy - Required to enable CORS for your bitcoin node. You can also use nginx or any other reverse proxy which enables CORS separately. JQ - Optional json command line parser, only used for legibility. For convenience, we've also added a docker-compose script which will setup a local bitcoin and ethereum environment which you can use for testing. $ git clone --branch master https://github.com/liquality/liquality-swap/ $ cd ./liquality-swap/src/test/integration/environment/ $ docker-compose up The above will start a bitcoin node in regtest mode with a cors proxy exposed over port 18443, as well as a ethereum ganache instance over port 8545. You will have to install mongo separately. You can test this as follows. For Bitcoin $ curl -s --user bitcoin:local321 --data-binary '{\"jsonrpc\":\"1.0\",\"id\":\"curltext\",\"method\":\"getblockchaininfo\",\"params\":[]}' -H 'content-type:text/plain;' http://127.0.0.1:18443 | jq . { \"result\" : { \"chain\" : \"regtest\" , \"blocks\" : 2405 , \"headers\" : 2405 , \"bestblockhash\" : \"3f468ba75ec193e2f61ada2d05316f2d64b4ada559ace068912168d23ba07090\" , \"difficulty\" : 4 .656542373906925e-10, \"mediantime\" : 1573650754 , \"verificationprogress\" : 1 , \"initialblockdownload\" : false, \"chainwork\" : \"00000000000000000000000000000000000000000000000000000000000012cc\" , \"size_on_disk\" : 753976 , \"pruned\" : false, \"softforks\" : [ { \"id\" : \"bip34\" , \"version\" : 2 , \"reject\" : { \"status\" : true } } , { \"id\" : \"bip66\" , \"version\" : 3 , \"reject\" : { \"status\" : true } } , { \"id\" : \"bip65\" , \"version\" : 4 , \"reject\" : { \"status\" : true } } ] , \"bip9_softforks\" : { \"csv\" : { \"status\" : \"active\" , \"startTime\" : 0 , \"timeout\" : 9223372036854776000 , \"since\" : 432 } , \"segwit\" : { \"status\" : \"active\" , \"startTime\" : -1, \"timeout\" : 9223372036854776000 , \"since\" : 0 } } , \"warnings\" : \"\" } , \"error\" : null, \"id\" : \"curltext\" } For Ethereum $ curl -s --data-binary '{\"jsonrpc\":\"1.0\",\"id\":\"curltext\",\"method\":\"net_version\",\"params\":[]}' -H 'content-type:text/plain;' http://127.0.0.1:8545 | jq . { \"id\" : \"curltext\" , \"jsonrpc\" : \"1.0\" , \"result\" : \"1573649903688\" } For Mongo, we can use docker $ docker run -p27017:27017 -d mongo","title":"Optional depending on your preferences"},{"location":"server/user/","text":"Swap run through steps \u00b6 Here we cover the steps required to execute a swap using the liquality swap interface. These steps should be executed before committing changes to the master branch of the liquality-swap repository. Prerequisite \u00b6 Before executing a swap you will need access to the following Access to an instance of the swap interface For convenience, we have an example swap interface up and running at https://liquality.io/swap/ . You are also welcome to spin up your own instance by visiting our github repo at https://github/liquality/liquality-swap/ Access to a Ledger Nano S with a sufficient balance of bitcoin required for the swap Access to Metamask with a sufficient balance of ether required for the swap A counter party (person you are looking to swap with) that also meets the requirements set out here. Your counter party will need to provide you with their preferred addresses, and terms for the assets you are looking to swap. Initiating a swap (Party A) - Swap Initiation \u00b6 Access the swap user interface Visit our demonstration swap interface Select the preferred Have and Want assets E.g. I want BTC in exchange for ETH Connect you wallets We currently only include support for two assets, nl. bitcoin and ether. Each asset is limited to a set of wallets including ledger (for bitcoin) and metamask (ether) Enter the preferred amount of the asset you have The amount for the asset you have should be entered under the \"Have\" column to the left. This includes an entry where you can provide the largest denimination of the asset you have selected for the \"Have\" criteria Enter the preferred amount of the asset you want The amount for the asset you have should be entered under the \"Want\" column to the right. This includes an entry where you can provide the largest denimination of the asset you have selected for the \"Want\" criteria Enter the address of the counter party asset for the \"Have\" column Enter the address of the counter party asset for the \"Want\" column Select the Next option Follow the prompts of the wallet from your \"Have\" selection A screen indicating that a swap has been initiated is shown. In this step, you would have locked up the amount of funds from the \"Have\" asset into a contract which is to be claimed by the counter party once they have confirmed the terms of the swap. Send the swap counter party link to the person you have agreed to swap with This is the person that you have established the terms of the swap with and whos addresses have been entered into the terms of this agreement. Select the \"Link sent\" option A screen \"Awaiting Counterparty\" is shown. On this screen, you are presented with information pertaining the to status of the swap. This includes, wether or not the counter party has accepted the terms of the trade, the terms of the swap Get x (Want) for y (have) active for the hh:mm:hr dd/mm/yyyy hh:mm. There is also a time indicator showing you the visual duration of the swap, together with the transaction ID of the \"Have\" asset you have locked up. You can also recover the swap link from the \"Swap Link\" option. Review terms of claim On confirmation of the terms of the swap, a screen prompting to claim the \"Want\" portion of the swap is presented Select \"Claim your funds\" Follow the prompts of the wallet from your \"Want\" selection A screen indicating that a swap has been completed is shown Confirming the terms for a swap (Party B) - Counter parties agree \u00b6 Access the Swap interface using a link provided by the swap initiator This link is generated during the \"Swap Initiation\" Review the terms of the Swap Confirm that you are in agreement with the terms set out by the initiator of the swap. These terms include the \"Want\" and \"Have\" assets, their respective values and the rate at which they are to be swapped. There is also information regarding the duration for which the swap is still valid. Connect you wallets We currently only include support for two assets, nl. bitcoin and ether. Each asset is limited to a set of wallets including ledger (for bitcoin) and metamask (ether) Select the Confirm Terms option Select this option if you are happy with the terms of this swap. Alternatively, initiate a swap with the revised terms and send the link to the counter party, or ask them to re-configured these terms based on the preferred values. Note: It might be undesirable to renogitiate these terms considering that the initiator has already locked up the funds for the initial terms of the contract. Follow the prompts of the wallet from your \"Have\" selection A screen indicating that a swap has been confirmed is shown. In this step, you would have locked up the amount of funds from the \"Have\" asset into a contract which is to be claimed by the counter party once they are satisfied that you have confirmed the terms of the swap. A screen \"Counterparty hasn't claimed\" is shown. On this screen, you are presented with information pertaining the to status of the swap. This includes, wether or not the counter party has claimed the funds based on the terms of the trade, the terms of the swap Get x (Want) for y (have) active for the hh:mm:hr dd/mm/yyyy hh:mm (usually half the duration of the initial terms). There is also a time indicator showing you the visual duration of the swap, together with the transaction ID of the \"Have\" asset you have locked up. You can also recover the swap link from the \"Swap Link\" option. Review terms of claim On confirmation of the terms of the claim, a screen prompting to claim the \"Want\" portion of the swap is presented Select \"Claim your funds\" Follow the prompts of the wallet from your \"Want\" selection A screen indicating that a swap has been completed is shown","title":"Performing a swap"},{"location":"server/user/#swap-run-through-steps","text":"Here we cover the steps required to execute a swap using the liquality swap interface. These steps should be executed before committing changes to the master branch of the liquality-swap repository.","title":"Swap run through steps"},{"location":"server/user/#prerequisite","text":"Before executing a swap you will need access to the following Access to an instance of the swap interface For convenience, we have an example swap interface up and running at https://liquality.io/swap/ . You are also welcome to spin up your own instance by visiting our github repo at https://github/liquality/liquality-swap/ Access to a Ledger Nano S with a sufficient balance of bitcoin required for the swap Access to Metamask with a sufficient balance of ether required for the swap A counter party (person you are looking to swap with) that also meets the requirements set out here. Your counter party will need to provide you with their preferred addresses, and terms for the assets you are looking to swap.","title":"Prerequisite"},{"location":"server/user/#initiating-a-swap-party-a-swap-initiation","text":"Access the swap user interface Visit our demonstration swap interface Select the preferred Have and Want assets E.g. I want BTC in exchange for ETH Connect you wallets We currently only include support for two assets, nl. bitcoin and ether. Each asset is limited to a set of wallets including ledger (for bitcoin) and metamask (ether) Enter the preferred amount of the asset you have The amount for the asset you have should be entered under the \"Have\" column to the left. This includes an entry where you can provide the largest denimination of the asset you have selected for the \"Have\" criteria Enter the preferred amount of the asset you want The amount for the asset you have should be entered under the \"Want\" column to the right. This includes an entry where you can provide the largest denimination of the asset you have selected for the \"Want\" criteria Enter the address of the counter party asset for the \"Have\" column Enter the address of the counter party asset for the \"Want\" column Select the Next option Follow the prompts of the wallet from your \"Have\" selection A screen indicating that a swap has been initiated is shown. In this step, you would have locked up the amount of funds from the \"Have\" asset into a contract which is to be claimed by the counter party once they have confirmed the terms of the swap. Send the swap counter party link to the person you have agreed to swap with This is the person that you have established the terms of the swap with and whos addresses have been entered into the terms of this agreement. Select the \"Link sent\" option A screen \"Awaiting Counterparty\" is shown. On this screen, you are presented with information pertaining the to status of the swap. This includes, wether or not the counter party has accepted the terms of the trade, the terms of the swap Get x (Want) for y (have) active for the hh:mm:hr dd/mm/yyyy hh:mm. There is also a time indicator showing you the visual duration of the swap, together with the transaction ID of the \"Have\" asset you have locked up. You can also recover the swap link from the \"Swap Link\" option. Review terms of claim On confirmation of the terms of the swap, a screen prompting to claim the \"Want\" portion of the swap is presented Select \"Claim your funds\" Follow the prompts of the wallet from your \"Want\" selection A screen indicating that a swap has been completed is shown","title":"Initiating a swap (Party A) - Swap Initiation"},{"location":"server/user/#confirming-the-terms-for-a-swap-party-b-counter-parties-agree","text":"Access the Swap interface using a link provided by the swap initiator This link is generated during the \"Swap Initiation\" Review the terms of the Swap Confirm that you are in agreement with the terms set out by the initiator of the swap. These terms include the \"Want\" and \"Have\" assets, their respective values and the rate at which they are to be swapped. There is also information regarding the duration for which the swap is still valid. Connect you wallets We currently only include support for two assets, nl. bitcoin and ether. Each asset is limited to a set of wallets including ledger (for bitcoin) and metamask (ether) Select the Confirm Terms option Select this option if you are happy with the terms of this swap. Alternatively, initiate a swap with the revised terms and send the link to the counter party, or ask them to re-configured these terms based on the preferred values. Note: It might be undesirable to renogitiate these terms considering that the initiator has already locked up the funds for the initial terms of the contract. Follow the prompts of the wallet from your \"Have\" selection A screen indicating that a swap has been confirmed is shown. In this step, you would have locked up the amount of funds from the \"Have\" asset into a contract which is to be claimed by the counter party once they are satisfied that you have confirmed the terms of the swap. A screen \"Counterparty hasn't claimed\" is shown. On this screen, you are presented with information pertaining the to status of the swap. This includes, wether or not the counter party has claimed the funds based on the terms of the trade, the terms of the swap Get x (Want) for y (have) active for the hh:mm:hr dd/mm/yyyy hh:mm (usually half the duration of the initial terms). There is also a time indicator showing you the visual duration of the swap, together with the transaction ID of the \"Have\" asset you have locked up. You can also recover the swap link from the \"Swap Link\" option. Review terms of claim On confirmation of the terms of the claim, a screen prompting to claim the \"Want\" portion of the swap is presented Select \"Claim your funds\" Follow the prompts of the wallet from your \"Want\" selection A screen indicating that a swap has been completed is shown","title":"Confirming the terms for a swap (Party B) - Counter parties agree"},{"location":"web_extension/introduction/","text":"Multi-asset Wallet extension Blog Post","title":"Introduction"}]}